{"version":3,"sources":["ColorBox.js","App.js","serviceWorker.js","index.js"],"names":["styles","container","width","height","padding","float","boxSizing","box","display","justifyContent","alignItems","backgroundColor","fontSize","color","Radium","props","Object","objectSpread","react_default","a","createElement","style","num","colors","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rects","boxNum","bind","assertThisInitialized","inputHandler","i","push","ColorBox","length","key","event","setState","target","value","replace","Styles","inputContainer","label","input","onChange","Component","marginRight","textAlign","lineHeight","border","boxShadow",":hover","ouline",":focus","outline","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAgBMA,EAAS,CACdC,UAAW,CACVC,MAAO,OACPC,OAAQ,OACRC,QAAS,MACTC,MAAO,OACPC,UAAW,cAEZC,IAAK,CACJC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,gBAAiB,OACjBT,MAAO,OACPC,OAAQ,OACRS,SAAU,OACVC,MAAO,UAIMC,cAjCH,SAACC,GAIZ,OAHIA,EAAMF,QACTb,EAAOO,IAAPS,OAAAC,EAAA,EAAAD,CAAA,GAAiBhB,EAAOO,IAAxB,CAA6BI,gBAAiBI,EAAMF,SAGpDK,EAAAC,EAAAC,cAAA,OAAKC,MAAOrB,EAAOC,WAClBiB,EAAAC,EAAAC,cAAA,OAAKC,MAAOrB,EAAOO,KACjBQ,EAAMO,IAAMP,EAAMO,IAAM,OCLvBC,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGIC,cACL,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAT,OAAAU,EAAA,EAAAV,CAAAW,KAAAH,IAClBC,EAAAT,OAAAY,EAAA,EAAAZ,CAAAW,KAAAX,OAAAa,EAAA,EAAAb,CAAAQ,GAAAM,KAAAH,KAAMZ,KACDgB,MAAQ,CACZC,MAAO,GACPC,OAAQ,IAETR,EAAKO,MAAQP,EAAKO,MAAME,KAAXlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAS,KACbA,EAAKW,aAAeX,EAAKW,aAAaF,KAAlBlB,OAAAmB,EAAA,EAAAnB,QAAAmB,EAAA,EAAAnB,CAAAS,KAPFA,uEAYlB,IADA,IAAIO,EAAQ,GACHK,EAAI,EAAGA,EAAEV,KAAKI,MAAME,OAAQI,IACpCL,EAAMM,KAAKpB,EAAAC,EAAAC,cAACmB,EAAD,CAAUjB,IAAKe,EAAE,EAAGxB,MAAOU,EAAOc,EAAEd,EAAOiB,QAASC,IAAKJ,KAErE,OAAOL,uCAGKU,GAEZf,KAAKgB,SAAS,CAAEV,OAAQS,EAAME,OAAOC,MAAMC,QAAQ,OAAQ,MAC3DnB,KAAKK,yCAGH,OACEd,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,MAAO0B,EAAOC,gBAClB9B,EAAAC,EAAAC,cAAA,SAAOC,MAAO0B,EAAOE,OAArB,mBAGA/B,EAAAC,EAAAC,cAAA,SACCC,MAAO0B,EAAOG,MACdL,MAAOlB,KAAKI,MAAME,OAClBkB,SAAUxB,KAAKS,gBAGfT,KAAKK,gBArCIoB,aA2CZL,EAAS,CACdC,eAAgB,CACfxC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZN,QAAS,QAEV6C,MAAO,CACNI,YAAa,QAEdH,MAAO,CACN9C,QAAS,WACTF,MAAO,QACPoD,UAAW,SACXC,WAAY,OACZ3C,SAAU,OACV4C,OAAQ,wBACRC,UAAW,uBACXC,SAAU,CACTF,OAAQ,iBACRG,OAAQ,QAETC,SAAU,CACTC,QAAS,UAKG/C,cAAOU,GC3EFsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba189458.chunk.js","sourcesContent":["import React from 'react';\nimport Radium from 'radium';\n\nconst box = (props) => {\n\tif (props.color) {\n\t\tstyles.box = {...styles.box, backgroundColor: props.color };\n\t}\n\treturn (\n\t\t<div style={styles.container}>\n\t\t\t<div style={styles.box}>\n\t\t\t\t{props.num ? props.num : ''}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst styles = {\n\tcontainer: {\n\t\twidth: '20vw',\n\t\theight: '20vw',\n\t\tpadding: '5px',\n\t\tfloat: 'left',\n\t\tboxSizing: 'border-box'\n\t},\n\tbox: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tbackgroundColor: 'blue',\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tfontSize: '3rem',\n\t\tcolor: 'white'\n\t}\n}\n\nexport default Radium(box);","import React, { Component } from 'react';\nimport Radium from 'radium';\nimport './App.css';\nimport ColorBox from './ColorBox';\n\nconst colors = [\n  '#C94C24',\n  '#268BD2',\n  '#C4226F',\n  '#859835',\n  '#6D73C2',\n  '#37A198',\n  '#DA3637',\n  '#F0AD4E'\n];\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trects: [],\n\t\t\tboxNum: 10\n\t\t};\n\t\tthis.rects = this.rects.bind(this)\n\t\tthis.inputHandler = this.inputHandler.bind(this)\n\t}\n\n\trects() {\n\t\tlet rects = [];\n\t\tfor (let i = 0; i<this.state.boxNum; i++) {\n\t\t\trects.push(<ColorBox num={i+1} color={colors[i%colors.length]} key={i}/>)\n\t\t}\n\t\treturn rects;\n\t}\n\n\tinputHandler(event) {\n\n\t\tthis.setState({ boxNum: event.target.value.replace(/\\D+/g, '') });\n\t\tthis.rects();\n\t}\n  render() {\n    return (\n      <div>\n      \t<div style={Styles.inputContainer}>\n      \t\t<label style={Styles.label} > \n      \t\t\tNumber of Boxes\n    \t\t\t</label>\n      \t\t<input\n      \t\t\tstyle={Styles.input}\n      \t\t\tvalue={this.state.boxNum}\n      \t\t\tonChange={this.inputHandler}\n    \t\t\t/>\n      \t</div>\n        {this.rects()}\n      </div>\n    );\n  }\n}\n\nconst Styles = {\n\tinputContainer: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tpadding: '20px'\n\t},\n\tlabel: {\n\t\tmarginRight: '20px',\n\t},\n\tinput: {\n\t\tpadding: '5px 10px',\n\t\twidth: '150px',\n\t\ttextAlign: 'center',\n\t\tlineHeight: '2rem',\n\t\tfontSize: '2rem',\n\t\tborder: '1px solid transparent',\n\t\tboxShadow: '0px 0px 2px 1px #666',\n\t\t':hover': {\n\t\t\tborder: '1px solid #999',\n\t\t\touline: 'none'\n\t\t},\n\t\t':focus': {\n\t\t\toutline: 'none'\n\t\t}\n\t}\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}